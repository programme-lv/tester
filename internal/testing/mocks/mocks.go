// Code generated by MockGen. DO NOT EDIT.
// Source: ./internal/testing/gatherer.go
//
// Generated by this command:
//
//	mockgen -source=./internal/testing/gatherer.go -destination=./internal/testing/mock_prepare_test.go
//

// Package mock_testing is a generated GoMock package.
package mocks

import (
	reflect "reflect"

	models "github.com/programme-lv/tester/internal/testing/models"
	"go.uber.org/mock/gomock"
)

// MockEvalResGatherer is a mock of EvalResGatherer interface.
type MockEvalResGatherer struct {
	ctrl     *gomock.Controller
	recorder *MockEvalResGathererMockRecorder
}

// MockEvalResGathererMockRecorder is the mock recorder for MockEvalResGatherer.
type MockEvalResGathererMockRecorder struct {
	mock *MockEvalResGatherer
}

// NewMockEvalResGatherer creates a new mock instance.
func NewMockEvalResGatherer(ctrl *gomock.Controller) *MockEvalResGatherer {
	mock := &MockEvalResGatherer{ctrl: ctrl}
	mock.recorder = &MockEvalResGathererMockRecorder{mock}
	return mock
}

// EXPECT returns an object that allows the caller to indicate expected use.
func (m *MockEvalResGatherer) EXPECT() *MockEvalResGathererMockRecorder {
	return m.recorder
}

// FinishCompilation mocks base method.
func (m *MockEvalResGatherer) FinishCompilation(data *models.RuntimeData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishCompilation", data)
}

// FinishCompilation indicates an expected call of FinishCompilation.
func (mr *MockEvalResGathererMockRecorder) FinishCompilation(data any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishCompilation", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishCompilation), data)
}

// FinishEvaluation mocks base method.
func (m *MockEvalResGatherer) FinishEvaluation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishEvaluation")
}

// FinishEvaluation indicates an expected call of FinishEvaluation.
func (mr *MockEvalResGathererMockRecorder) FinishEvaluation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishEvaluation", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishEvaluation))
}

// FinishTestWithLimitExceeded mocks base method.
func (m *MockEvalResGatherer) FinishTestWithLimitExceeded(testId int64, flags models.RuntimeExceededFlags) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishTestWithLimitExceeded", testId, flags)
}

// FinishTestWithLimitExceeded indicates an expected call of FinishTestWithLimitExceeded.
func (mr *MockEvalResGathererMockRecorder) FinishTestWithLimitExceeded(testId, flags any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTestWithLimitExceeded", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishTestWithLimitExceeded), testId, flags)
}

// FinishTestWithRuntimeError mocks base method.
func (m *MockEvalResGatherer) FinishTestWithRuntimeError(testId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishTestWithRuntimeError", testId)
}

// FinishTestWithRuntimeError indicates an expected call of FinishTestWithRuntimeError.
func (mr *MockEvalResGathererMockRecorder) FinishTestWithRuntimeError(testId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTestWithRuntimeError", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishTestWithRuntimeError), testId)
}

// FinishTestWithVerdictAccepted mocks base method.
func (m *MockEvalResGatherer) FinishTestWithVerdictAccepted(testId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishTestWithVerdictAccepted", testId)
}

// FinishTestWithVerdictAccepted indicates an expected call of FinishTestWithVerdictAccepted.
func (mr *MockEvalResGathererMockRecorder) FinishTestWithVerdictAccepted(testId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTestWithVerdictAccepted", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishTestWithVerdictAccepted), testId)
}

// FinishTestWithVerdictWrongAnswer mocks base method.
func (m *MockEvalResGatherer) FinishTestWithVerdictWrongAnswer(testId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishTestWithVerdictWrongAnswer", testId)
}

// FinishTestWithVerdictWrongAnswer indicates an expected call of FinishTestWithVerdictWrongAnswer.
func (mr *MockEvalResGathererMockRecorder) FinishTestWithVerdictWrongAnswer(testId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishTestWithVerdictWrongAnswer", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishTestWithVerdictWrongAnswer), testId)
}

// FinishWithCompilationError mocks base method.
func (m *MockEvalResGatherer) FinishWithCompilationError() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishWithCompilationError")
}

// FinishWithCompilationError indicates an expected call of FinishWithCompilationError.
func (mr *MockEvalResGathererMockRecorder) FinishWithCompilationError() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishWithCompilationError", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishWithCompilationError))
}

// FinishWithInternalServerError mocks base method.
func (m *MockEvalResGatherer) FinishWithInternalServerError(arg0 error) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "FinishWithInternalServerError", arg0)
}

// FinishWithInternalServerError indicates an expected call of FinishWithInternalServerError.
func (mr *MockEvalResGathererMockRecorder) FinishWithInternalServerError(arg0 any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "FinishWithInternalServerError", reflect.TypeOf((*MockEvalResGatherer)(nil).FinishWithInternalServerError), arg0)
}

// IgnoreTest mocks base method.
func (m *MockEvalResGatherer) IgnoreTest(testId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IgnoreTest", testId)
}

// IgnoreTest indicates an expected call of IgnoreTest.
func (mr *MockEvalResGathererMockRecorder) IgnoreTest(testId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IgnoreTest", reflect.TypeOf((*MockEvalResGatherer)(nil).IgnoreTest), testId)
}

// IncrementScore mocks base method.
func (m *MockEvalResGatherer) IncrementScore(delta int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "IncrementScore", delta)
}

// IncrementScore indicates an expected call of IncrementScore.
func (mr *MockEvalResGathererMockRecorder) IncrementScore(delta any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "IncrementScore", reflect.TypeOf((*MockEvalResGatherer)(nil).IncrementScore), delta)
}

// ReportTestCheckerRuntimeData mocks base method.
func (m *MockEvalResGatherer) ReportTestCheckerRuntimeData(testId int64, rd *models.RuntimeData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportTestCheckerRuntimeData", testId, rd)
}

// ReportTestCheckerRuntimeData indicates an expected call of ReportTestCheckerRuntimeData.
func (mr *MockEvalResGathererMockRecorder) ReportTestCheckerRuntimeData(testId, rd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTestCheckerRuntimeData", reflect.TypeOf((*MockEvalResGatherer)(nil).ReportTestCheckerRuntimeData), testId, rd)
}

// ReportTestSubmissionRuntimeData mocks base method.
func (m *MockEvalResGatherer) ReportTestSubmissionRuntimeData(testId int64, rd *models.RuntimeData) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "ReportTestSubmissionRuntimeData", testId, rd)
}

// ReportTestSubmissionRuntimeData indicates an expected call of ReportTestSubmissionRuntimeData.
func (mr *MockEvalResGathererMockRecorder) ReportTestSubmissionRuntimeData(testId, rd any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "ReportTestSubmissionRuntimeData", reflect.TypeOf((*MockEvalResGatherer)(nil).ReportTestSubmissionRuntimeData), testId, rd)
}

// StartCompilation mocks base method.
func (m *MockEvalResGatherer) StartCompilation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartCompilation")
}

// StartCompilation indicates an expected call of StartCompilation.
func (mr *MockEvalResGathererMockRecorder) StartCompilation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartCompilation", reflect.TypeOf((*MockEvalResGatherer)(nil).StartCompilation))
}

// StartEvaluation mocks base method.
func (m *MockEvalResGatherer) StartEvaluation() {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartEvaluation")
}

// StartEvaluation indicates an expected call of StartEvaluation.
func (mr *MockEvalResGathererMockRecorder) StartEvaluation() *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartEvaluation", reflect.TypeOf((*MockEvalResGatherer)(nil).StartEvaluation))
}

// StartTest mocks base method.
func (m *MockEvalResGatherer) StartTest(testId int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartTest", testId)
}

// StartTest indicates an expected call of StartTest.
func (mr *MockEvalResGathererMockRecorder) StartTest(testId any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTest", reflect.TypeOf((*MockEvalResGatherer)(nil).StartTest), testId)
}

// StartTesting mocks base method.
func (m *MockEvalResGatherer) StartTesting(maxScore int64) {
	m.ctrl.T.Helper()
	m.ctrl.Call(m, "StartTesting", maxScore)
}

// StartTesting indicates an expected call of StartTesting.
func (mr *MockEvalResGathererMockRecorder) StartTesting(maxScore any) *gomock.Call {
	mr.mock.ctrl.T.Helper()
	return mr.mock.ctrl.RecordCallWithMethodType(mr.mock, "StartTesting", reflect.TypeOf((*MockEvalResGatherer)(nil).StartTesting), maxScore)
}
