syntax = "proto3";

option go_package = "github.com/programme-lv/tester/api";
package api;

message EvaluationRequest {
  string submission = 1;
  ProgramLang language = 2;
  ExecLimits limits = 3;
  repeated TestAccess tests = 4;
  string testlibChecker = 5;
  string callbackUrl = 6; // feedback will be sent to this URL
}

message TestAccess {
  int64 id = 1;

  string inSha256 = 2;
  optional string inDownloadUrl = 3;
  optional string inContent = 4;

  string ansSha256 = 5;
  optional string ansDownloadUrl = 6;
  optional string ansContent = 7;
}

message ProgramLang {
  string id = 1;
  string name = 2;
  string codeFilename = 3;
  optional string compileCmd = 4;
  optional string compiledFilename = 5;
  string executeCmd = 6;
}

message ExecLimits {
  int64 CPUTimeMillis = 1;
  int64 memKibiBytes = 2;
}

message EvaluationFeedback {
  oneof feedback_types {
    StartEvaluation startEvaluation = 1;
    FinishEvaluation finishEvaluation = 2;

    StartCompilation startCompilation = 3;
    FinishCompilation finishCompilation = 4;

    StartTesting startTesting = 5;

    IgnoreTest ignoreTest = 6;
    StartTest startTest = 7;
    FinishTest finishTest = 8;
  }
}

message StartEvaluation {}
message FinishEvaluation {
    oneof result {
        EvalError error = 1;
        EvalSuccess success = 2;
    }
}

message StartCompilation {}
message FinishCompilation { ExecData compilation = 1; }

message StartTesting {}

message IgnoreTest { int64 testId = 1; }
message StartTest { int64 testId = 1; }
message FinishTest {
  int64 testId = 1;
  ExecData program = 2;
  optional ExecData checker = 3;
  TestVerdict verdict = 4;
  optional LimitsExceeded limits = 5;
}

enum TestVerdict {
  ACCEPTED = 0;
  WRONG_ANSWER = 1;
  LIMIT_EXCEEDED = 2;
  RUNTIME_ERROR = 3;
}

message LimitsExceeded {
  bool isCPUTimeExceeded = 1;
  bool memoryLimitExceeded = 2;
  bool idlenessLimitExceeded = 3;
}

message IncrementScore { int64 delta = 1; }

message ExecData {
  string stdout = 1;
  string stderr = 2;
  int64 exitCode = 3;
  int64 cpuTimeMillis = 4;
  int64 wallTimeMillis = 5;
  int64 memKibiBytes = 6;
}

message EvalError {string message = 1;}
message EvalSuccess {}