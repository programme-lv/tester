[[languages]]
id = "cpp17"
lang_name = "C++17"
code_fname = "solution.cpp"
compile_cmd = "g++ -std=c++17 -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"
version_cmd = "g++ -std=c++17 -x c++ -o /dev/null - <<< 'int main(){}'"

[[languages]]
id = "py313"
lang_name = "Python 3.13"
code_fname = "solution.py"
exec_cmd = "python3.13 solution.py"
version_cmd = "python3.13 --version | grep 3.13"

[[languages]]
id = "go125"
lang_name = "Go 1.25"
code_fname = "main.go"
compile_cmd = "go build main.go"
compiled_fname = "main"
exec_cmd = "./main"
version_cmd = "go version | grep 1.25"

[[languages]]
id = "java25"
lang_name = "Java SE 25"
code_fname = "Main.java"
compile_cmd = "javac --release 25 Main.java"
compiled_fname = "Main.class"
exec_cmd = "java -Xss64M -Xmx1024M -Xms8M -XX:NewRatio=2 -XX:TieredStopAtLevel=1 -XX:+UseSerialGC Main"
version_cmd = "java --version | grep 25"

[[scenarios]]
description = """
Simplest C++ hello world program. \
"""

[[scenarios.request]]
code = '''
#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
'''
tests = [
    { in = "", ans = "Hello, World!" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
C++ program that exceeds CPU time limit (TLE). \
"""

[[scenarios.request]]
code = '''
int main() {
    volatile long long x = 0;
    while (true) {
        x++;
    }
    return 0;
}
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 50
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "TLE" }]

[[scenarios]]
description = """
C++ program that exceeds memory limit (MLE). \
"""

[[scenarios.request]]
code = '''
#include <vector>
int main() {
    const size_t N = 64 * 1024 * 1024; // ~64M bytes
    std::vector<char> v;
    v.reserve(N);
    for (size_t i = 0; i < N; ++i) v.push_back(0);
    return 0;
}
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 200
wall_ms = 500
ram_kib = 1024

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "MLE" }]

[[scenarios]]
description = """
C++ out-of-bounds array access causing runtime error. \
"""

[[scenarios.request]]
code = '''
#include <vector>
int main() {
    std::vector<int> v(1);
    return v.at(5); // throws std::out_of_range
}
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }]

[[scenarios]]
description = """
Python 3.13 hello world program. \
"""

[[scenarios.request]]
code = '''
print("Hello, World!")
'''
tests = [
    { in = "", ans = "Hello, World!" },
]

[scenarios.request.limits]
cpu_ms = 200
wall_ms = 500
ram_kib = 16384

[scenarios.request.language]
lang_id = "py313"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
Python 3.13 division by zero (runtime error). \
"""

[[scenarios.request]]
code = '''
a = 1
b = 0
print(a // b)
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 200
wall_ms = 500
ram_kib = 16384

[scenarios.request.language]
lang_id = "py313"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }]

[[scenarios]]
description = """
Python 3.13 tight loop to exceed CPU time limit (TLE). \
"""

[[scenarios.request]]
code = '''
while True:
    pass
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 50
wall_ms = 500
ram_kib = 16384

[scenarios.request.language]
lang_id = "py313"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "TLE" }]

[[scenarios]]
description = """
Python 3.13 wrong answer vs expected (WA). \
"""

[[scenarios.request]]
code = '''
print(3)
'''
tests = [
    { in = "", ans = "2" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_id = "py313"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "WA" }]

[[scenarios]]
description = """
C++ code with syntax errors that should fail to compile. \
Tests compile error handling. \
"""

[[scenarios.request]]
code = '''
#include <iostream>

int main() {
    int x = 10
    std::cout << x << std::endl;
    return 0;
}
'''

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "compile_error"

[[scenarios]]
description = """
C++ code that divides by zero causing runtime error. \
Tests runtime error handling. \
"""

[[scenarios.request]]
code = '''
#include <iostream>

int main() {
    int a, b;
    if (!(std::cin >> a >> b)) return 0;
    
    int result = a / b;
    std::cout << result << std::endl;
    return 0;
}
'''
tests = [
    { in = "10 0", ans = "" },
    { in = "10 1", ans = "10" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }, { verdict = "OK" }]

[[scenarios]]
description = """
C++17 snippet that won't compile with C++14 or earlier. \
Tests C++17 language support. \
"""

[[scenarios.request]]
code = '''
#include <iostream>
#include <utility>
#include <type_traits>

template <typename... Ts>
auto sum(Ts... ts) { return (ts + ...); }

int main() {
    int a, b;
    if (!(std::cin >> a >> b)) return 0;

    auto [x, y] = std::pair{a, b};
    if constexpr (std::is_integral_v<decltype(x)>) {
        std::cout << sum(x, y) << '\n';
    }
}
'''
tests = [
    { in = "10 20", ans = "30" },
    { in = "10 20", ans = "31" },
    { in = "69 420", ans = "489" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_id = "cpp17"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }, { verdict = "WA" }, { verdict = "OK" }]


[[scenarios]]
description = """
Java SE exact version probe: expect Runtime.version().feature() == 25. \
"""

[[scenarios.request]]
code = '''
public class Main {
    public static void main(String[] args) {
        System.out.println(Runtime.version().feature());
    }
}
'''
tests = [
    { in = "", ans = "25" },
]

[scenarios.request.limits]
cpu_ms = 2000
wall_ms = 5000
ram_kib = 1048576

[scenarios.request.language]
lang_id = "java25"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
Go 1.25 hello world program. \
"""

[[scenarios.request]]
code = '''
package main
import "fmt"
func main() {
    fmt.Println("Hello, World!")
}
'''
tests = [
    { in = "", ans = "Hello, World!" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_id = "go125"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
Go 1.25 code with syntax errors that should fail to compile. \
Tests compile error handling. \
"""

[[scenarios.request]]
code = '''
package main
import "fmt"
func main() {
    fmt.Println("Hello, World!")
'''

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_id = "go125"

[scenarios.expect]
status = "compile_error"

[[scenarios]]
description = """
Go 1.25 divide by zero causing runtime error. \
Tests runtime error handling. \
"""

[[scenarios.request]]
code = '''
package main
import (
    "fmt"
)
func main() {
    var a, b int
    if _, err := fmt.Scan(&a, &b); err != nil {
        return
    }
    // If b is 0, this panics at runtime
    fmt.Println(a / b)
}
'''
tests = [
    { in = "10 0", ans = "" },
    { in = "10 1", ans = "10" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_id = "go125"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }, { verdict = "OK" }]

[[scenarios]]
description = """
Java SE 25 hello world program. \
"""

[[scenarios.request]]
code = '''
public class Main {
    public static void main(String[] args) {
        System.out.println("Hello, World!");
    }
}
'''
tests = [
    { in = "", ans = "Hello, World!" },
]

[scenarios.request.limits]
cpu_ms = 2000
wall_ms = 5000
ram_kib = 1048576

[scenarios.request.language]
lang_id = "java25"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
Java SE 25 code with syntax errors that should fail to compile. \
Tests compile error handling. \
"""

[[scenarios.request]]
code = '''
public class Main {
    public static void main(String[] args) {
        int x = 10
        System.out.println(x);
    }
}
'''

[scenarios.request.limits]
cpu_ms = 2000
wall_ms = 5000
ram_kib = 1048576

[scenarios.request.language]
lang_id = "java25"

[scenarios.expect]
status = "compile_error"

[[scenarios]]
description = """
Java SE 25 divide by zero causing runtime error. \
Tests runtime error handling. \
"""

[[scenarios.request]]
code = '''
import java.util.*;
public class Main {
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        if (!sc.hasNextInt()) return;
        int a = sc.nextInt();
        if (!sc.hasNextInt()) return;
        int b = sc.nextInt();
        System.out.println(a / b);
    }
}
'''
tests = [
    { in = "10 0", ans = "" },
    { in = "10 1", ans = "10" },
]

[scenarios.request.limits]
cpu_ms = 2000
wall_ms = 5000
ram_kib = 1048576

[scenarios.request.language]
lang_id = "java25"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }, { verdict = "OK" }]
