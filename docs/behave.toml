[[scenarios]]
description = """
Simplest C++ hello world program. \
"""

[[scenarios.request]]
code = '''
#include <iostream>

int main() {
    std::cout << "Hello, World!" << std::endl;
    return 0;
}
'''
tests = [
    { in = "", ans = "Hello, World!" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_name = "C++"
code_fname = "solution.cpp"
compile_cmd = "g++ -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
C++ program that exceeds CPU time limit (TLE). \
"""

[[scenarios.request]]
code = '''
int main() {
    volatile long long x = 0;
    while (true) {
        x++;
    }
    return 0;
}
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 50
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_name = "C++"
code_fname = "solution.cpp"
compile_cmd = "g++ -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "TLE" }]

[[scenarios]]
description = """
C++ program that exceeds memory limit (MLE). \
"""

[[scenarios.request]]
code = '''
#include <vector>
int main() {
    const size_t N = 64 * 1024 * 1024; // ~64M bytes
    std::vector<char> v;
    v.reserve(N);
    for (size_t i = 0; i < N; ++i) v.push_back(0);
    return 0;
}
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 200
wall_ms = 500
ram_kib = 1024

[scenarios.request.language]
lang_name = "C++"
code_fname = "solution.cpp"
compile_cmd = "g++ -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "MLE" }]

[[scenarios]]
description = """
C++ out-of-bounds array access causing runtime error. \
"""

[[scenarios.request]]
code = '''
#include <vector>
int main() {
    std::vector<int> v(1);
    return v.at(5); // throws std::out_of_range
}
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_name = "C++"
code_fname = "solution.cpp"
compile_cmd = "g++ -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }]

[[scenarios]]
description = """
Python 3.12 hello world program. \
"""

[[scenarios.request]]
code = '''
print("Hello, World!")
'''
tests = [
    { in = "", ans = "Hello, World!" },
]

[scenarios.request.limits]
cpu_ms = 200
wall_ms = 500
ram_kib = 16384

[scenarios.request.language]
lang_name = "Python 3.12"
code_fname = "solution.py"
exec_cmd = "python3.12 solution.py"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "OK" }]

[[scenarios]]
description = """
Python 3.12 division by zero (runtime error). \
"""

[[scenarios.request]]
code = '''
a = 1
b = 0
print(a // b)
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 200
wall_ms = 500
ram_kib = 16384

[scenarios.request.language]
lang_name = "Python 3.12"
code_fname = "solution.py"
exec_cmd = "python3.12 solution.py"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }]

[[scenarios]]
description = """
Python 3.12 tight loop to exceed CPU time limit (TLE). \
"""

[[scenarios.request]]
code = '''
while True:
    pass
'''
tests = [
    { in = "", ans = "" },
]

[scenarios.request.limits]
cpu_ms = 50
wall_ms = 500
ram_kib = 16384

[scenarios.request.language]
lang_name = "Python 3.12"
code_fname = "solution.py"
exec_cmd = "python3.12 solution.py"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "TLE" }]

[[scenarios]]
description = """
Python 3.12 wrong answer vs expected (WA). \
"""

[[scenarios.request]]
code = '''
print(3)
'''
tests = [
    { in = "", ans = "2" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 16384

[scenarios.request.language]
lang_name = "Python 3.12"
code_fname = "solution.py"
exec_cmd = "python3.12 solution.py"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "WA" }]

[[scenarios]]
description = """
C++ code with syntax errors that should fail to compile. \
Tests compile error handling. \
"""

[[scenarios.request]]
code = '''
#include <iostream>

int main() {
    int x = 10
    std::cout << x << std::endl;
    return 0;
}
'''

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_name = "C++"
code_fname = "solution.cpp"
compile_cmd = "g++ -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"

[scenarios.expect]
status = "compile_error"

[[scenarios]]
description = """
C++ code that divides by zero causing runtime error. \
Tests runtime error handling. \
"""

[[scenarios.request]]
code = '''
#include <iostream>

int main() {
    int a, b;
    if (!(std::cin >> a >> b)) return 0;
    
    int result = a / b;
    std::cout << result << std::endl;
    return 0;
}
'''
tests = [
    { in = "10 0", ans = "" },
    { in = "10 1", ans = "10" },
]

[scenarios.request.limits]
cpu_ms = 100
wall_ms = 200
ram_kib = 1024

[scenarios.request.language]
lang_name = "C++"
code_fname = "solution.cpp"
compile_cmd = "g++ -O2 -o solution solution.cpp"
compiled_fname = "solution"
exec_cmd = "./solution"

[scenarios.expect]
status = "success"
test_results = [{ verdict = "RE" }, { verdict = "OK" }]
